{"paragraphs":[{"text":"%md ##Event Statistics using Scala","dateUpdated":"2018-02-11T12:03:10+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>##Event Statistics using Scala</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1518350573951_-1877419235","id":"20170126-084346_411967885","dateCreated":"2018-02-11T12:02:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:244","user":"anonymous","dateFinished":"2018-02-11T12:03:10+0000","dateStarted":"2018-02-11T12:03:10+0000"},{"title":"Event Statistics using Scala","text":"// any import statements go here\nimport org.apache.spark.rdd.RDD\nimport org.apache.commons.io.IOUtils\nimport java.text.SimpleDateFormat\nimport java.util.Date\nimport java.net.URL\nimport java.nio.charset.Charset\nimport org.apache.spark.sql._","dateUpdated":"2018-02-11T12:03:12+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"title":false,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.rdd.RDD\nimport org.apache.commons.io.IOUtils\nimport java.text.SimpleDateFormat\nimport java.util.Date\nimport java.net.URL\nimport java.nio.charset.Charset\nimport org.apache.spark.sql._\n"}]},"apps":[],"jobName":"paragraph_1518350573952_-1793159225","id":"20170125-092928_572765858","dateCreated":"2018-02-11T12:02:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:245","user":"anonymous","dateFinished":"2018-02-11T12:03:45+0000","dateStarted":"2018-02-11T12:03:13+0000"},{"title":"Then, load data. We uploaded the data on S3 for easier loading","text":"// load raw data\n\n//def loadFromUrl(url:String) = \n    //sc.parallelize(\n        //IOUtils.toString(\n           // new URL(url),\n            //Charset.forName(\"utf8\")).split(\"\\n\"))\n            \n//val events = loadFromUrl(\"http://sunlab.org/download/course/hw2/events.csv\")\n//val mortality = loadFromUrl(\"http://sunlab.org/download/course/hw2/mortality.csv\")\n\nval events = sc.textFile(\"file:///mnt/host/home/doris/hw2/data/events.csv\")\nval mortality = sc.textFile(\"file:///mnt/host/home/doris/hw2/data/mortality.csv\")","dateUpdated":"2018-02-11T12:03:54+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"events: org.apache.spark.rdd.RDD[String] = file:///mnt/host/home/doris/hw2/data/events.csv MapPartitionsRDD[1] at textFile at <console>:56\nmortality: org.apache.spark.rdd.RDD[String] = file:///mnt/host/home/doris/hw2/data/mortality.csv MapPartitionsRDD[3] at textFile at <console>:45\n"}]},"apps":[],"jobName":"paragraph_1518350573952_-1793159225","id":"20170125-102007_1054430570","dateCreated":"2018-02-11T12:02:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:246","user":"anonymous","dateFinished":"2018-02-11T12:04:00+0000","dateStarted":"2018-02-11T12:03:54+0000"},{"text":"import java.util.Date\n// Define case class\ncase class Event(patientId: String, category: String, event: String, date: java.util.Date, value: Double)\ncase class Mortality(patientId: String, mortality_date:  java.util.Date, label: Double)\ncase class MyEvent(patientid:String,category:String, event:String, date: java.sql.Date, value:Double)","dateUpdated":"2018-02-11T12:04:04+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import java.util.Date\ndefined class Event\ndefined class Mortality\ndefined class MyEvent\n"}]},"apps":[],"jobName":"paragraph_1518350573964_-1797776212","id":"20170125-093656_1081259042","dateCreated":"2018-02-11T12:02:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:247","user":"anonymous","dateFinished":"2018-02-11T12:04:10+0000","dateStarted":"2018-02-11T12:04:04+0000"},{"text":"\n// Define date format\nval dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\")","dateUpdated":"2018-02-11T12:04:13+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"dateFormat: java.text.SimpleDateFormat = java.text.SimpleDateFormat@f67a0200\n"}]},"apps":[],"jobName":"paragraph_1518350573965_-1798160961","id":"20170205-182828_2037956217","dateCreated":"2018-02-11T12:02:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:248","user":"anonymous","dateFinished":"2018-02-11T12:04:15+0000","dateStarted":"2018-02-11T12:04:14+0000"},{"text":"\n// Load events & mortality into their corresponding RDD\n//val eventsRDD: RDD[Event] = events.map(s=>s.split(\",\")).map(s=>Event(s(0), s(1), s(2),dateFormat.parse(s(3).asInstanceOf[String]), s(4).toDouble))\nval eventsRDD: RDD[Event] = events.map(s=>s.split(\",\")).map(s=>Event(s(0), s(1), s(2),dateFormat.parse(s(3).asInstanceOf[String]), if (s.length > 4 ) s(4).toDouble else 0.0 )).cache()\nval mortalityRDD: RDD[Mortality] = mortality.map(s=>s.split(\",\")).map(s=>Mortality(s(0), dateFormat.parse(s(1).asInstanceOf[String]), s(2).toDouble)).cache()","dateUpdated":"2018-02-11T12:04:18+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"eventsRDD: org.apache.spark.rdd.RDD[Event] = MapPartitionsRDD[5] at map at <console>:55\nmortalityRDD: org.apache.spark.rdd.RDD[Mortality] = MapPartitionsRDD[7] at map at <console>:52\n"}]},"apps":[],"jobName":"paragraph_1518350573998_-1809318679","id":"20170125-103206_1230836042","dateCreated":"2018-02-11T12:02:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:249","user":"anonymous","dateFinished":"2018-02-11T12:04:23+0000","dateStarted":"2018-02-11T12:04:18+0000"},{"title":"Event count is defined as the number of events recorded for a given patient","text":"def event_count_metrics(eve: RDD[(Event)], mor: RDD[(Mortality)]) : (Double, Double, Double, Double, Double, Double) = {\n    // TODO : Implement this function to return the event count metrics.\n    val dead_id = mor.map(m => m.patientId).collect().toSet\n    val dead_events = eve.filter(e => dead_id.contains(e.patientId)).map(e => MyEvent(e.patientId,e.category,e.event,new java.sql.Date(e.date.asInstanceOf[java.util.Date].getTime),e.value))\n    val alive_events = eve.filter(e => !(dead_id.contains(e.patientId))).map(e => MyEvent(e.patientId,e.category,e.event,new java.sql.Date(e.date.asInstanceOf[java.util.Date].getTime),e.value))\n    \n    val dead = dead_events.groupBy(_.patientid).map(e=>(e._1,e._2.size))\n    val dead_count = dead.map(e => e._2)\n    \n    val alive = alive_events.groupBy(_.patientid).map(e=>(e._1,e._2.size))\n    val alive_count = alive.map(e => e._2)\n    \n    \n    val avg_dead_event_count = dead_count.mean()\n    val max_dead_event_count = dead_count.max()\n    val min_dead_event_count = dead_count.min()\n    val avg_alive_event_count = alive_count.mean()\n    val max_alive_event_count = alive_count.max()\n    val min_alive_event_count = alive_count.min()\n    \n    (avg_dead_event_count, max_dead_event_count, min_dead_event_count, avg_alive_event_count, max_alive_event_count, min_alive_event_count)\n}","dateUpdated":"2018-02-11T12:04:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"event_count_metrics: (eve: org.apache.spark.rdd.RDD[Event], mor: org.apache.spark.rdd.RDD[Mortality])(Double, Double, Double, Double, Double, Double)\n"}]},"apps":[],"jobName":"paragraph_1518350574009_-1802777948","id":"20170125-163824_794924019","dateCreated":"2018-02-11T12:02:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:250","user":"anonymous","dateFinished":"2018-02-11T12:04:37+0000","dateStarted":"2018-02-11T12:04:33+0000"},{"title":"Encounter count is defined as the count of unique dates on which a given patient visited the ICU. ","text":"def encounter_count_metrics(eve: RDD[(Event)], mor: RDD[(Mortality)]) : (Double, Double, Double, Double, Double, Double) = {\n    // TODO : Implement this function to return the encounter count metrics.\n    val dead_id = mor.map(m => m.patientId).collect().toSet\n    val dead_events = eve.filter(e => dead_id.contains(e.patientId)).map(e => MyEvent(e.patientId,e.category,e.event,new java.sql.Date(e.date.asInstanceOf[java.util.Date].getTime),e.value))\n    val alive_events = eve.filter(e => !(dead_id.contains(e.patientId))).map(e => MyEvent(e.patientId,e.category,e.event,new java.sql.Date(e.date.asInstanceOf[java.util.Date].getTime),e.value))\n    \n    val dead = dead_events.groupBy(_.patientid).map(e=>(e._1,e._2.map(_.date).toSet.size))\n    val dead_count = dead.map(e => e._2)\n    \n    val alive = alive_events.groupBy(_.patientid).map(e=>(e._1,e._2.map(_.date).toSet.size))\n    val alive_count = alive.map(e => e._2)\n    \n    val avg_dead_encounter_count = dead_count.mean()\n    val max_dead_encounter_count = dead_count.max()\n    val min_dead_encounter_count = dead_count.min()\n    val avg_alive_encounter_count = alive_count.mean()\n    val max_alive_encounter_count = alive_count.max()\n    val min_alive_encounter_count = alive_count.min()\n    \n    (avg_dead_encounter_count, max_dead_encounter_count, min_dead_encounter_count, avg_alive_encounter_count, max_alive_encounter_count, min_alive_encounter_count)\n}","dateUpdated":"2018-02-11T12:05:21+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"encounter_count_metrics: (eve: org.apache.spark.rdd.RDD[Event], mor: org.apache.spark.rdd.RDD[Mortality])(Double, Double, Double, Double, Double, Double)\n"}]},"apps":[],"jobName":"paragraph_1518350574010_-1801623701","id":"20170126-094037_1369751422","dateCreated":"2018-02-11T12:02:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:251","user":"anonymous","dateFinished":"2018-02-11T12:05:26+0000","dateStarted":"2018-02-11T12:05:21+0000"},{"title":"Testing Event Count - Don't change this cell","text":"\nval (avg_dead_event_count, max_dead_event_count, min_dead_event_count, avg_alive_event_count, max_alive_event_count, min_alive_event_countt) = \nevent_count_metrics(eventsRDD, mortalityRDD)","dateUpdated":"2018-02-11T12:05:51+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"avg_dead_event_count: Double = 1027.738522954092\nmax_dead_event_count: Double = 16829.0\nmin_dead_event_count: Double = 2.0\navg_alive_event_count: Double = 683.1552587646075\nmax_alive_event_count: Double = 12627.0\nmin_alive_event_countt: Double = 1.0\n"}]},"apps":[],"jobName":"paragraph_1518350574010_-1801623701","id":"20170125-164106_1373358169","dateCreated":"2018-02-11T12:02:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:252","user":"anonymous","dateFinished":"2018-02-11T12:10:06+0000","dateStarted":"2018-02-11T12:05:51+0000"},{"title":"Populate the correct values in df_events dataframe","text":"case class eventRecord(Average_Event: Double , Max_Event: Double, Min_Event: Double, Mortality: String) \n//val df_events = Seq(eventRecord(50.0, 80.0, 20.0, \"Alive\"), eventRecord(100.0, 160.0, 60.0, \"Dead\")).toDF \n\n// TODO - Fill in the correct values of minimum, maximum and average events for Alive and Dead Patients \nval df_events = Seq(eventRecord(683.15,12627.0,1.0, \"Alive\"), eventRecord(1027.73, 16829.0,2.0,  \"Dead\")).toDF\ndf_events.registerTempTable(\"df_events\")\n","dateUpdated":"2018-02-11T12:11:18+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class eventRecord\ndf_events: org.apache.spark.sql.DataFrame = [Average_Event: double, Max_Event: double ... 2 more fields]\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"}]},"apps":[],"jobName":"paragraph_1518350574035_-1811242424","id":"20170126-095056_275615884","dateCreated":"2018-02-11T12:02:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:253","user":"anonymous","dateFinished":"2018-02-11T12:11:31+0000","dateStarted":"2018-02-11T12:11:18+0000"},{"title":"Plot Event Count Grouped by Dead/Alive","text":"%sql\nselect * from df_events","dateUpdated":"2018-02-11T12:02:54+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sql","title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{"stacked":false},"stackedAreaChart":{"style":"stack"}},"commonSetting":{},"keys":[{"name":"Mortality","index":3,"aggr":"sum"}],"groups":[],"values":[{"name":"Max_Event","index":1,"aggr":"sum"},{"name":"Average_Event","index":0,"aggr":"sum"},{"name":"Min_Event","index":2,"aggr":"sum"}]},"helium":{}}},"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"Max_Event","index":1,"aggr":"sum"},{"name":"Average_Event","index":0,"aggr":"sum"},{"name":"Min_Event","index":2,"aggr":"sum"}],"values":[{"name":"Max_Event","index":1,"aggr":"sum"},{"name":"Average_Event","index":0,"aggr":"sum"},{"name":"Min_Event","index":2,"aggr":"sum"}],"groups":[{"name":"Mortality","index":3,"aggr":"sum"}],"scatter":{"xAxis":{"name":"Average_Event","index":0,"aggr":"sum"},"yAxis":{"name":"Max_Event","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Average_Event\tMax_Event\tMin_Event\tMortality\n683.15\t12627.0\t1.0\tAlive\n1027.73\t16829.0\t2.0\tDead\n"}]},"apps":[],"jobName":"paragraph_1518350574035_-1811242424","id":"20170127-103258_1100387642","dateCreated":"2018-02-11T12:02:54+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:254"},{"title":"Testing Encounter Count - Don't change any cell starting from this one","text":"val  (avg_dead_encounter_count, max_dead_encounter_count, min_dead_encounter_count, avg_alive_encounter_count, max_alive_encounter_count, min_alive_encounter_count) = encounter_count_metrics(eventsRDD, mortalityRDD)","dateUpdated":"2018-02-11T12:11:35+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"avg_dead_encounter_count: Double = 24.83932135728543\nmax_dead_encounter_count: Double = 375.0\nmin_dead_encounter_count: Double = 1.0\navg_alive_encounter_count: Double = 18.69549248747912\nmax_alive_encounter_count: Double = 391.0\nmin_alive_encounter_count: Double = 1.0\n"}]},"apps":[],"jobName":"paragraph_1518350574036_-1813166168","id":"20170126-085842_586212247","dateCreated":"2018-02-11T12:02:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:255","user":"anonymous","dateFinished":"2018-02-11T12:14:11+0000","dateStarted":"2018-02-11T12:11:35+0000"},{"title":"Populate the correct values in df_encounters dataframe","text":"case class encounterRecord(Average_Encounter: Double , Max_Encounter: Double, Min_Encounter: Double, Mortality: String)\n\n//val df_encounter = Seq(encounterRecord(50.0, 80.0, 20.0, \"Alive\"), encounterRecord(100.0, 160.0, 60.0, \"Dead\")).toDF \n\n//TODO - Fill in the correct values of average, maximum and minimum events for Alive and Dead Patients \nval df_encounter = Seq(encounterRecord(18.70,391,1.0,  \"Alive\"), encounterRecord(24.84,375.0,1.0, \"Dead\")).toDF\ndf_encounter.registerTempTable(\"df_encounter\")\n","dateUpdated":"2018-02-11T12:02:54+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class encounterRecord\ndf_encounter: org.apache.spark.sql.DataFrame = [Average_Encounter: double, Max_Encounter: double ... 2 more fields]\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"}]},"apps":[],"jobName":"paragraph_1518350574036_-1813166168","id":"20170127-104258_320884595","dateCreated":"2018-02-11T12:02:54+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:256"},{"title":"Plot Encounter Count Grouped by Dead/Alive","text":"%sql\nselect * from df_encounter ","dateUpdated":"2018-02-11T12:02:54+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sql","title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"multiBarChart":{}},"commonSetting":{},"keys":[{"name":"Mortality","index":3,"aggr":"sum"}],"groups":[],"values":[{"name":"Max_Encounter","index":1,"aggr":"sum"},{"name":"Average_Encounter","index":0,"aggr":"sum"},{"name":"Min_Encounter","index":2,"aggr":"sum"}]},"helium":{}}},"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"Max_Encounter","index":1,"aggr":"sum"},{"name":"Average_Encounter","index":0,"aggr":"sum"},{"name":"Min_Encounter","index":2,"aggr":"sum"}],"values":[{"name":"Max_Encounter","index":1,"aggr":"sum"},{"name":"Average_Encounter","index":0,"aggr":"sum"},{"name":"Min_Encounter","index":2,"aggr":"sum"}],"groups":[{"name":"Mortality","index":3,"aggr":"sum"}],"scatter":{"xAxis":{"name":"Average_Encounter","index":0,"aggr":"sum"},"yAxis":{"name":"Max_Encounter","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Average_Encounter\tMax_Encounter\tMin_Encounter\tMortality\n18.7\t391.0\t1.0\tAlive\n24.84\t375.0\t1.0\tDead\n"}]},"apps":[],"jobName":"paragraph_1518350574037_-1813550917","id":"20170127-113147_1780103981","dateCreated":"2018-02-11T12:02:54+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:257"},{"text":"","dateUpdated":"2018-02-11T12:02:54+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518350574067_-1823554389","id":"20170127-113337_1396101507","dateCreated":"2018-02-11T12:02:54+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:258"}],"name":"BDH_HW2_Zeppelin","id":"2D8A4HPJE","angularObjects":{"2D5RDPRKP:shared_process":[],"2D66X8G11:shared_process":[],"2D6YFX1WH:shared_process":[],"2D8CJBMCX:shared_process":[],"2D59QTM13:shared_process":[],"2D6E812D3:shared_process":[],"2D889515X:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}